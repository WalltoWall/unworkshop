/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type Sliders = {
  _type: "sliders";
  name: string;
  illustration: "speechBubbles" | "rollingBoards" | "clocksAndHands" | "seeSaw" | "usVsThem" | "targetAudienceA" | "targetAudienceB";
  groups?: Array<string>;
  steps: Array<{
    prompt: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal";
      listItem?: never;
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
    sliders: Array<{
      prompt: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "normal";
        listItem?: never;
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      }>;
      left: string;
      right: string;
      _type: "slider";
      _key: string;
    }>;
    _type: "step";
    _key: string;
  }>;
};

export type Kickoff = {
  _id: string;
  _type: "kickoff";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  code: Slug;
  greeting: string;
  exercises: Array<{
    _key: string;
  } & Sliders>;
};

export type MediaTag = {
  _id: string;
  _type: "media.tag";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: Slug;
};

export type Slug = {
  _type: "slug";
  current: string;
  source?: string;
};

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | SanityAssetSourceData | Sliders | Kickoff | MediaTag | Slug;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ../app/src/sanity/client.ts
// Variable: kickoffQ
// Query: *[_type == "kickoff" && code.current == $code][0] {			title,			"code": code.current,			greeting,			exercises[] { 				name, 				illustration, 				groups, 				"type": _type, 				_type == 'sliders' => { "steps": count(steps) }			}		}
export type KickoffQResult = {
  title: string;
  code: string;
  greeting: string;
  exercises: Array<{
    name: string;
    illustration: "clocksAndHands" | "rollingBoards" | "seeSaw" | "speechBubbles" | "targetAudienceA" | "targetAudienceB" | "usVsThem";
    groups: Array<string> | null;
    type: "sliders";
    steps: number;
  }>;
} | null;
// Variable: exerciseQ
// Query: *[_type == "kickoff" && code.current == $code][0].exercises[] {			name,			groups,			"type": _type,			_type == 'sliders' => { steps }		}
export type ExerciseQResult = Array<{
  name: string;
  groups: Array<string> | null;
  type: "sliders";
  steps: Array<{
    prompt: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal";
      listItem?: never;
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
    sliders: Array<{
      prompt: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "normal";
        listItem?: never;
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      }>;
      left: string;
      right: string;
      _type: "slider";
      _key: string;
    }>;
    _type: "step";
    _key: string;
  }>;
}> | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "\n\t\t*[_type == \"kickoff\" && code.current == $code][0] {\n\t\t\ttitle,\n\t\t\t\"code\": code.current,\n\t\t\tgreeting,\n\t\t\texercises[] { \n\t\t\t\tname, \n\t\t\t\tillustration, \n\t\t\t\tgroups, \n\t\t\t\t\"type\": _type, \n\n\t\t\t\t_type == 'sliders' => { \"steps\": count(steps) }\n\t\t\t}\n\t\t}": KickoffQResult;
    "\n\t\t*[_type == \"kickoff\" && code.current == $code][0].exercises[] {\n\t\t\tname,\n\t\t\tgroups,\n\t\t\t\"type\": _type,\n\n\t\t\t_type == 'sliders' => { steps }\n\t\t}": ExerciseQResult;
  }
}
